一、=，==，===的区别及运算速度
①=是赋值号，并不能用来比较，例如下面这段语句
var num=1;
k=function(){return 1};
if (k()=num) num=2;
那么他就会报错，报错原因为：Invalid left-hand side in assignment（左侧赋值无效）
也就是说，=无论是否出现在if或是while或是其他语句中，依旧充当赋值号的作用，不进行比较，那么问题来了
现有如下程序段：
var k,s;
k=0;
s=1;
if (k=s) console.log(k);
请问：已知控制台有输出，请问控制台输出的k的值是____。（答案：1）
var k,s;
k=0;
s=1;
if (k=s&&true) console.log(k);
请问：已知控制台有输出，请问控制台输出的k的值是____。（答案：true）
var k,s;
k=0;
s=1;
if (k=s||true) console.log(k);
请问：已知控制台有输出，请问控制台输出的k的值是____。（答案：1）
②==和===，这两个为比较用符号，但这两个有略微的区别，==可以跨类型比较，而===必须值和类型均相符才为真，下面是几个例子
1==1 //true
1===1 //true
'1'==1 //true
'1'===1 //false
undefined==undefined //true
undefined===undefined //true
大致了解了？那来做几道简单判断吧
有三条语句如下
var a,b,c,d;
a=function(){return true};
b='return true';
c='function(){return true}';
d='true';
请判断
a==b (答案：false)
a==c (答案：false)
a==d (答案：true)
a===c (答案：false)
a===d (答案：false)
但是#(滑稽) 涉及到小数，也就是所谓的浮点数呢，就要小心了
1==1.0 (答案：true)
1===1.0 （答案：true）
1.0+2.0==3.0 (答案：true)
1.0+2.0===3.0 （答案：true）
0.1+0.2==0.3 （答案：false）
0.1+0.2===0.3 （答案：false）
0.2-0.1==0.3-0.2 （答案：false）
0.3/0.1==3 （答案：false）
以上，大家应该了解这几个符号的区别了吧，那么他们的在比较中的运算速度是这么样的呢？（答案：===快于==）是不是令人震惊？为什么比较更严格，运算速度反而更快，占用内存更小？这个问题留给评论区人才了#(滑稽) 明天公布答案
二、闭包相关
类似数学中的定义域，函数有自己作用的范围，而这个范围仅为定义这个函数时使用的范围，下面是一个例子
var a,b,c;
a=1;
b=function(){
console.log(a);
};
c=function(){
var a=2;
b();
}
那么，一直这个函数有输出，请问输出的是几呢？（答案：1）
可能有人看了这个例子不懂，那么我们换成无名杀来试试
skill={
enable:'phaseUse',
content:function(){
game.a=function(){
player.damage();
};
var player=game.zhu;
game.a();
},
}
那么请问谁会受到伤害，主公还是自己？相必这下很多人就看得出来是自己了吧，那么，下面送大家几道阅读题
var x,y;
x=function(){
 console.log(a);
};
y=function(x){
 var a=2;
 x();
}
y(x)
已知控制台有输出，请问输出结果是___？（答案：undefined）
var a;
a=function(){
 var x = 1;
var b= function(){
 console.log(x);
 }
 return b;
}
var x = 2;
var f = a();
f()
已知控制台有输出，请问输出结果是___？（答案：1）
三、数据的加减
有人觉得这还用说么，那么这里直接上例子#(滑稽) 
阅读以下程序，回答问题（共4小题，每小题8分，共32分）（等等这奇怪的画风是。。）
var a=3;
console.log(a--)
输出的结果是___。
var a=3;
console.log(a-=1)
输出的结果是___。
var a=3;
console.log(a-1)
输出的结果是___。
var a=3;
console.log(--a)
输出的结果是___。
答案（3，2，2，2）
这下看出区别了吧，加号也是同理
四、初始值的设定
在自定义函数中，我们常会用到一些参数，或者用arguement代替，对于一些没有按规矩使用函数的就会很头疼，这时，初始值就发挥作用了
请比较下面两个例子
var a=function(a,b,c,d,e){
if (!a) a=1;
if (!b) b=1;
if (!c) c=1;
if (!d) d=1;
if (!e) e=1;
return [a,b,c,d,e]
}
var b=function(a,b,c,d,e){
a=a||1;
b=b||1;
c=c||1;
d=d||1;
e=e||1;
return [a,b,c,d,e]
}
觉得哪个高大上就自己领走吧#(滑稽) 