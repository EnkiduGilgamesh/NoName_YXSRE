上接教程1
一、运算
常见的一些运算符
+,-,*,/,%（求余）,?(条件)
下面很简单的几个例子
0*1 输出0
1/0 输出NaN
但是这里有几点需要注意：
①window.Infinity(可简写为Infinity)最好不要乱用，原因：Infinity*0是NaN而不是0；Infinity-Infinity也是NaN
②相乘的两个数不要过大，否则自动变成Infinity,如9*9e+9999999999999的值为Infinity
二、循环
相信大家编技能编多了，应该都会for，for...in，while之类的，这里只介绍continue和break，有效运用这两个语句可以提高你代码的运行速度
continue:退出当前这个循环并开始下一个循环
例如 for (var i=0;i<game.players.length;i++){
if (game.players[i]==game.me) continue;
game.players[i].damage();
}//对除你以外的其他角色造成一点伤害
这样就可以有效跳过自己
break:退出整个循环，例如
 for (var i=0;i<game.players.length;i++){
if (game.players[i]==game.me) continue;
game.players[i].damage();
}//对序号在你之前的角色造成一点伤害（并不一定是座位号）
三、数据交换
在编写技能过程中，我们常常需要将不同的属性赋予不同的另外属性的值，而那些另外属性可能有时又要被复写，详见下面几个例子
var a=1,b=2;
如果要交换a,b的值，那么一般我们会怎么做呢？（以下方法均适用于所有类型，包括但不限于数字）
下面是第一种做法
①var a=1,b=2;
var c=a;
a=b;b=c;
这应该也是普遍使用的方法，下面我们来看第二种方法
②var a=1;b=2;
a = [b, b=a][0];
这种方法可以减少一个变量，也是各大网页普遍使用的写法，那么我们来看第三种方法
③var a=1,b=2;
[a,b]=[b,a];
这种方法代码编写量少,偷懒者必备,下面是第四种方法
④var a=1;b=2;
a = {a : b, b : a};b = a.b;a = a.a;
这种方法是看起来比较高大上的写法，至少你写在技能里萌新想用没那么容易了#(滑稽)  下面在看第五种
⑤var a=1,b=2;
a=(function(){;
 try{return b}
 finally{b=a}}
)();
这种方法是最大材小用的方法，但是看起来高大上啊对吧#(滑稽)  
下面是运行速度排名（由快到慢）：①>③≈④＞②＞⑤自取